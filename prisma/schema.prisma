// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  moderatedGroups Group[]        @relation("Moderator") // Użytkownik może moderować wiele grup
  meetings        GroupMeeting[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  groupMembership GroupMembership[]
}

enum Role {
  Admin
  Moderator
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @unique @default(uuid())
  email   String   @unique
  expires DateTime

  @@unique([id, email])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Group {
  id   String @id @default(uuid())
  name String

  moderatorId String
  moderator   User   @relation("Moderator", fields: [moderatorId], references: [id]) // Dodajemy relację do moderatora

  maxMembers Int

  street String?
  city   String?

  price Float?

  meetings GroupMeeting[]
  members  GroupMembership[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model GroupMeeting {
  id        String    @id @default(uuid())
  startTime DateTime
  endTime   DateTime?

  street String
  city   String
  number Int
  price  Float

  groupId      String
  group        Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  participants User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMembership {
  id String @id @default(uuid())
  status GroupMembershipStatus

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId]) // Użytkownik może mieć tylko jedno zgłoszenie do danej grupy
}

enum GroupMembershipStatus {
  Candidate
  Member
}